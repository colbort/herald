#ifndef kalix_libherald_bindings_h
#define kalix_libherald_bindings_h

/* Warning: this file is autogenerated. Don't modify this manually. */

#include <cstdarg>
#include <cstdint>
#include <cstdlib>
#include <new>
#include "extern_error.h"

namespace ffi {

static const int DATABASE_ERROR = 2;

static const int HERALD_ERROR = 1;

static const int INVALID_STRING = 3;

/// Thin wrapper around sqlite3 database connection.
struct Database;

/// A constant buffer, templated over the `Item` type.
template<typename Item>
struct ConstBuffer {
  const Item *data;
  uintptr_t len;
};

/// Database handle
using HeraldDB = Database;

/// Type alias for a raw string.
using RawStr = const char*;

/// Error struct. Typically included as the final argument of a function that can produce an error.
using ExternError = ExternError;

struct HeraldContact {
  int64_t uid;
  RawStr name;
};

using Contacts = ConstBuffer<HeraldContact>;

extern "C" {

/// Frees a ConstBuffer.
void const_buffer_string_free(const ConstBuffer<const char*> *buf);

/// Returns number of items in a `ConstBuffer`
/// Returns -1 on failure.
int const_buffer_string_len(const ConstBuffer<const char*> *buf);

int64_t herald_contacts_add(HeraldDB *db, RawStr name, ExternError *error);

void herald_contacts_create_table(HeraldDB *db, ExternError *error);

void herald_contacts_drop(HeraldDB *db, ExternError *error);

const Contacts *herald_contacts_load(HeraldDB *db, ExternError *error);

/// Destructor for `HeraldDB`
void herald_db_close(HeraldDB *v);

HeraldDB *herald_db_init(ExternError *e);

} // extern "C"

} // namespace ffi

#endif // kalix_libherald_bindings_h
