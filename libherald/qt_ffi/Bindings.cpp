/* generated by rust_qt_binding_generator */
#include "Bindings.h"

namespace {

    struct option_qint64 {
    public:
        qint64 value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_qint64>::value, "option_qint64 must be a POD type.");

    struct option_quint32 {
    public:
        quint32 value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_quint32>::value, "option_quint32 must be a POD type.");

    struct option_quintptr {
    public:
        quintptr value;
        bool some;
        operator QVariant() const {
            if (some) {
                return QVariant::fromValue(value);
            }
            return QVariant();
        }
    };
    static_assert(std::is_pod<option_quintptr>::value, "option_quintptr must be a POD type.");

    typedef void (*qstring_set)(QString* val, const char* utf8, int nbytes);
    void set_qstring(QString* val, const char* utf8, int nbytes) {
        *val = QString::fromUtf8(utf8, nbytes);
    }

    typedef void (*qbytearray_set)(QByteArray* val, const char* bytes, int nbytes);
    void set_qbytearray(QByteArray* v, const char* bytes, int nbytes) {
        if (v->isNull() && nbytes == 0) {
            *v = QByteArray(bytes, nbytes);
        } else {
            v->truncate(0);
            v->append(bytes, nbytes);
        }
    }

    struct qmodelindex_t {
        int row;
        quintptr id;
    };
    inline QVariant cleanNullQVariant(const QVariant& v) {
        return (v.isNull()) ?QVariant() :v;
    }
    inline void configColorChanged(Config* o)
    {
        Q_EMIT o->colorChanged();
    }
    inline void configColorschemeChanged(Config* o)
    {
        Q_EMIT o->colorschemeChanged();
    }
    inline void configConfigIdChanged(Config* o)
    {
        Q_EMIT o->configIdChanged();
    }
    inline void configDisplayNameChanged(Config* o)
    {
        Q_EMIT o->displayNameChanged();
    }
    inline void configNameChanged(Config* o)
    {
        Q_EMIT o->nameChanged();
    }
    inline void configProfilePictureChanged(Config* o)
    {
        Q_EMIT o->profilePictureChanged();
    }
    inline void conversationsFilterChanged(Conversations* o)
    {
        Q_EMIT o->filterChanged();
    }
    inline void conversationsFilterRegexChanged(Conversations* o)
    {
        Q_EMIT o->filterRegexChanged();
    }
    inline void heraldStateConfigInitChanged(HeraldState* o)
    {
        Q_EMIT o->configInitChanged();
    }
    inline void messagesConversationIdChanged(Messages* o)
    {
        Q_EMIT o->conversationIdChanged();
    }
    inline void messagesLastAuthorChanged(Messages* o)
    {
        Q_EMIT o->lastAuthorChanged();
    }
    inline void messagesLastBodyChanged(Messages* o)
    {
        Q_EMIT o->lastBodyChanged();
    }
    inline void messagesLastEpochTimestampMsChanged(Messages* o)
    {
        Q_EMIT o->lastEpochTimestampMsChanged();
    }
    inline void messagesLastStatusChanged(Messages* o)
    {
        Q_EMIT o->lastStatusChanged();
    }
    inline void networkHandleConnectionPendingChanged(NetworkHandle* o)
    {
        Q_EMIT o->connectionPendingChanged();
    }
    inline void networkHandleConnectionUpChanged(NetworkHandle* o)
    {
        Q_EMIT o->connectionUpChanged();
    }
    inline void networkHandleNewAddContactRespChanged(NetworkHandle* o)
    {
        Q_EMIT o->newAddContactRespChanged();
    }
    inline void networkHandleNewAddConvRespChanged(NetworkHandle* o)
    {
        Q_EMIT o->newAddConvRespChanged();
    }
    inline void networkHandleNewContactChanged(NetworkHandle* o)
    {
        Q_EMIT o->newContactChanged();
    }
    inline void networkHandleNewConvDataChanged(NetworkHandle* o)
    {
        Q_EMIT o->newConvDataChanged();
    }
    inline void networkHandleNewConversationChanged(NetworkHandle* o)
    {
        Q_EMIT o->newConversationChanged();
    }
    inline void usersConversationIdChanged(Users* o)
    {
        Q_EMIT o->conversationIdChanged();
    }
    inline void usersFilterChanged(Users* o)
    {
        Q_EMIT o->filterChanged();
    }
    inline void usersFilterRegexChanged(Users* o)
    {
        Q_EMIT o->filterRegexChanged();
    }
}
extern "C" {
    Config::Private* config_new(Config*, void (*)(Config*), void (*)(Config*), void (*)(Config*), void (*)(Config*), void (*)(Config*), void (*)(Config*));
    void config_free(Config::Private*);
    quint32 config_color_get(const Config::Private*);
    void config_color_set(Config::Private*, quint32);
    quint32 config_colorscheme_get(const Config::Private*);
    void config_colorscheme_set(Config::Private*, quint32);
    void config_config_id_get(const Config::Private*, QString*, qstring_set);
    void config_display_name_get(const Config::Private*, QString*, qstring_set);
    void config_name_get(const Config::Private*, QString*, qstring_set);
    void config_name_set(Config::Private*, const ushort *str, int len);
    void config_name_set_none(Config::Private*);
    void config_profile_picture_get(const Config::Private*, QString*, qstring_set);
    void config_profile_picture_set(Config::Private*, const ushort *str, int len);
    void config_profile_picture_set_none(Config::Private*);
};

extern "C" {
    quint32 conversations_data_color(const Conversations::Private*, int);
    bool conversations_set_data_color(Conversations::Private*, int, quint32);
    void conversations_data_conversation_id(const Conversations::Private*, int, QByteArray*, qbytearray_set);
    bool conversations_data_matched(const Conversations::Private*, int);
    bool conversations_set_data_matched(Conversations::Private*, int, bool);
    bool conversations_data_muted(const Conversations::Private*, int);
    bool conversations_set_data_muted(Conversations::Private*, int, bool);
    bool conversations_data_pairwise(const Conversations::Private*, int);
    void conversations_data_picture(const Conversations::Private*, int, QString*, qstring_set);
    bool conversations_set_data_picture(Conversations::Private*, int, const ushort* s, int len);
    bool conversations_set_data_picture_none(Conversations::Private*, int);
    void conversations_data_title(const Conversations::Private*, int, QString*, qstring_set);
    bool conversations_set_data_title(Conversations::Private*, int, const ushort* s, int len);
    bool conversations_set_data_title_none(Conversations::Private*, int);
    void conversations_sort(Conversations::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int conversations_row_count(const Conversations::Private*);
    bool conversations_insert_rows(Conversations::Private*, int, int);
    bool conversations_remove_rows(Conversations::Private*, int, int);
    bool conversations_can_fetch_more(const Conversations::Private*);
    void conversations_fetch_more(Conversations::Private*);
}
int Conversations::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Conversations::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Conversations::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : conversations_row_count(m_d);
}

bool Conversations::insertRows(int row, int count, const QModelIndex &)
{
    return conversations_insert_rows(m_d, row, count);
}

bool Conversations::removeRows(int row, int count, const QModelIndex &)
{
    return conversations_remove_rows(m_d, row, count);
}

QModelIndex Conversations::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Conversations::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Conversations::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : conversations_can_fetch_more(m_d);
}

void Conversations::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        conversations_fetch_more(m_d);
    }
}
void Conversations::updatePersistentIndexes() {}

void Conversations::sort(int column, Qt::SortOrder order)
{
    conversations_sort(m_d, column, order);
}
Qt::ItemFlags Conversations::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    if (i.column() == 0) {
        flags |= Qt::ItemIsEditable;
    }
    return flags;
}

quint32 Conversations::color(int row) const
{
    return conversations_data_color(m_d, row);
}

bool Conversations::setColor(int row, quint32 value)
{
    bool set = false;
    set = conversations_set_data_color(m_d, row, value);
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QByteArray Conversations::conversationId(int row) const
{
    QByteArray b;
    conversations_data_conversation_id(m_d, row, &b, set_qbytearray);
    return b;
}

bool Conversations::matched(int row) const
{
    return conversations_data_matched(m_d, row);
}

bool Conversations::setMatched(int row, bool value)
{
    bool set = false;
    set = conversations_set_data_matched(m_d, row, value);
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

bool Conversations::muted(int row) const
{
    return conversations_data_muted(m_d, row);
}

bool Conversations::setMuted(int row, bool value)
{
    bool set = false;
    set = conversations_set_data_muted(m_d, row, value);
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

bool Conversations::pairwise(int row) const
{
    return conversations_data_pairwise(m_d, row);
}

QString Conversations::picture(int row) const
{
    QString s;
    conversations_data_picture(m_d, row, &s, set_qstring);
    return s;
}

bool Conversations::setPicture(int row, const QString& value)
{
    bool set = false;
    if (value.isNull()) {
        set = conversations_set_data_picture_none(m_d, row);
    } else {
    set = conversations_set_data_picture(m_d, row, value.utf16(), value.length());
    }
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QString Conversations::title(int row) const
{
    QString s;
    conversations_data_title(m_d, row, &s, set_qstring);
    return s;
}

bool Conversations::setTitle(int row, const QString& value)
{
    bool set = false;
    if (value.isNull()) {
        set = conversations_set_data_title_none(m_d, row);
    } else {
    set = conversations_set_data_title(m_d, row, value.utf16(), value.length());
    }
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QVariant Conversations::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(color(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(conversationId(index.row()));
        case Qt::UserRole + 2:
            return QVariant::fromValue(matched(index.row()));
        case Qt::UserRole + 3:
            return QVariant::fromValue(muted(index.row()));
        case Qt::UserRole + 4:
            return QVariant::fromValue(pairwise(index.row()));
        case Qt::UserRole + 5:
            return cleanNullQVariant(QVariant::fromValue(picture(index.row())));
        case Qt::UserRole + 6:
            return cleanNullQVariant(QVariant::fromValue(title(index.row())));
        }
        break;
    }
    return QVariant();
}

int Conversations::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Conversations::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "color");
    names.insert(Qt::UserRole + 1, "conversationId");
    names.insert(Qt::UserRole + 2, "matched");
    names.insert(Qt::UserRole + 3, "muted");
    names.insert(Qt::UserRole + 4, "pairwise");
    names.insert(Qt::UserRole + 5, "picture");
    names.insert(Qt::UserRole + 6, "title");
    return names;
}
QVariant Conversations::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Conversations::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

bool Conversations::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (index.column() == 0) {
        if (role == Qt::UserRole + 0) {
            if (value.canConvert(qMetaTypeId<quint32>())) {
                return setColor(index.row(), value.value<quint32>());
            }
        }
        if (role == Qt::UserRole + 2) {
            if (value.canConvert(qMetaTypeId<bool>())) {
                return setMatched(index.row(), value.value<bool>());
            }
        }
        if (role == Qt::UserRole + 3) {
            if (value.canConvert(qMetaTypeId<bool>())) {
                return setMuted(index.row(), value.value<bool>());
            }
        }
        if (role == Qt::UserRole + 5) {
            if (!value.isValid() || value.isNull() ||value.canConvert(qMetaTypeId<QString>())) {
                return setPicture(index.row(), value.value<QString>());
            }
        }
        if (role == Qt::UserRole + 6) {
            if (!value.isValid() || value.isNull() ||value.canConvert(qMetaTypeId<QString>())) {
                return setTitle(index.row(), value.value<QString>());
            }
        }
    }
    return false;
}

extern "C" {
    Conversations::Private* conversations_new(Conversations*, void (*)(Conversations*), void (*)(Conversations*),
        void (*)(const Conversations*),
        void (*)(Conversations*),
        void (*)(Conversations*),
        void (*)(Conversations*, quintptr, quintptr),
        void (*)(Conversations*),
        void (*)(Conversations*),
        void (*)(Conversations*, int, int),
        void (*)(Conversations*),
        void (*)(Conversations*, int, int, int),
        void (*)(Conversations*),
        void (*)(Conversations*, int, int),
        void (*)(Conversations*));
    void conversations_free(Conversations::Private*);
    void conversations_filter_get(const Conversations::Private*, QString*, qstring_set);
    void conversations_filter_set(Conversations::Private*, const ushort *str, int len);
    bool conversations_filter_regex_get(const Conversations::Private*);
    void conversations_filter_regex_set(Conversations::Private*, bool);
    void conversations_add_conversation(Conversations::Private*, QByteArray*, qbytearray_set);
    bool conversations_handle_contact_req_ack(Conversations::Private*, const char*, int);
    bool conversations_refresh(Conversations::Private*, const char*, int);
    bool conversations_remove_conversation(Conversations::Private*, quint64);
    bool conversations_toggle_filter_regex(Conversations::Private*);
};

extern "C" {
    HeraldState::Private* herald_state_new(HeraldState*, void (*)(HeraldState*));
    void herald_state_free(HeraldState::Private*);
    bool herald_state_config_init_get(const HeraldState::Private*);
    void herald_state_config_init_set(HeraldState::Private*, bool);
};

extern "C" {
    HeraldUtils::Private* herald_utils_new(HeraldUtils*);
    void herald_utils_free(HeraldUtils::Private*);
    double herald_utils_chat_bubble_natural_width(const HeraldUtils::Private*, double, double);
    bool herald_utils_compare_byte_array(const HeraldUtils::Private*, const char*, int, const char*, int);
    bool herald_utils_is_valid_rand_id(const HeraldUtils::Private*, const char*, int);
};

extern "C" {
    void messages_data_author(const Messages::Private*, int, QString*, qstring_set);
    void messages_data_body(const Messages::Private*, int, QString*, qstring_set);
    qint64 messages_data_epoch_timestamp_ms(const Messages::Private*, int);
    void messages_data_message_id(const Messages::Private*, int, QByteArray*, qbytearray_set);
    void messages_data_op(const Messages::Private*, int, QByteArray*, qbytearray_set);
    void messages_sort(Messages::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int messages_row_count(const Messages::Private*);
    bool messages_insert_rows(Messages::Private*, int, int);
    bool messages_remove_rows(Messages::Private*, int, int);
    bool messages_can_fetch_more(const Messages::Private*);
    void messages_fetch_more(Messages::Private*);
}
int Messages::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Messages::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Messages::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : messages_row_count(m_d);
}

bool Messages::insertRows(int row, int count, const QModelIndex &)
{
    return messages_insert_rows(m_d, row, count);
}

bool Messages::removeRows(int row, int count, const QModelIndex &)
{
    return messages_remove_rows(m_d, row, count);
}

QModelIndex Messages::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Messages::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Messages::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : messages_can_fetch_more(m_d);
}

void Messages::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        messages_fetch_more(m_d);
    }
}
void Messages::updatePersistentIndexes() {}

void Messages::sort(int column, Qt::SortOrder order)
{
    messages_sort(m_d, column, order);
}
Qt::ItemFlags Messages::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    return flags;
}

QString Messages::author(int row) const
{
    QString s;
    messages_data_author(m_d, row, &s, set_qstring);
    return s;
}

QString Messages::body(int row) const
{
    QString s;
    messages_data_body(m_d, row, &s, set_qstring);
    return s;
}

qint64 Messages::epochTimestampMs(int row) const
{
    return messages_data_epoch_timestamp_ms(m_d, row);
}

QByteArray Messages::messageId(int row) const
{
    QByteArray b;
    messages_data_message_id(m_d, row, &b, set_qbytearray);
    return b;
}

QByteArray Messages::op(int row) const
{
    QByteArray b;
    messages_data_op(m_d, row, &b, set_qbytearray);
    return b;
}

QVariant Messages::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(author(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(body(index.row()));
        case Qt::UserRole + 2:
            return QVariant::fromValue(epochTimestampMs(index.row()));
        case Qt::UserRole + 3:
            return QVariant::fromValue(messageId(index.row()));
        case Qt::UserRole + 4:
            return cleanNullQVariant(QVariant::fromValue(op(index.row())));
        }
        break;
    }
    return QVariant();
}

int Messages::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Messages::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "author");
    names.insert(Qt::UserRole + 1, "body");
    names.insert(Qt::UserRole + 2, "epochTimestampMs");
    names.insert(Qt::UserRole + 3, "messageId");
    names.insert(Qt::UserRole + 4, "op");
    return names;
}
QVariant Messages::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Messages::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

extern "C" {
    Messages::Private* messages_new(Messages*, void (*)(Messages*), void (*)(Messages*), void (*)(Messages*), void (*)(Messages*), void (*)(Messages*),
        void (*)(const Messages*),
        void (*)(Messages*),
        void (*)(Messages*),
        void (*)(Messages*, quintptr, quintptr),
        void (*)(Messages*),
        void (*)(Messages*),
        void (*)(Messages*, int, int),
        void (*)(Messages*),
        void (*)(Messages*, int, int, int),
        void (*)(Messages*),
        void (*)(Messages*, int, int),
        void (*)(Messages*));
    void messages_free(Messages::Private*);
    void messages_conversation_id_get(const Messages::Private*, QByteArray*, qbytearray_set);
    void messages_conversation_id_set(Messages::Private*, const char* bytes, int len);
    void messages_conversation_id_set_none(Messages::Private*);
    void messages_last_author_get(const Messages::Private*, QString*, qstring_set);
    void messages_last_body_get(const Messages::Private*, QString*, qstring_set);
    option_qint64 messages_last_epoch_timestamp_ms_get(const Messages::Private*);
    option_quint32 messages_last_status_get(const Messages::Private*);
    bool messages_clear_conversation_history(Messages::Private*);
    void messages_clear_conversation_view(Messages::Private*);
    bool messages_delete_message(Messages::Private*, quint64);
    void messages_insert_message(Messages::Private*, const ushort*, int, QByteArray*, qbytearray_set);
    void messages_message_body_by_id(const Messages::Private*, const char*, int, QString*, qstring_set);
    bool messages_poll_update(Messages::Private*);
    void messages_reply(Messages::Private*, const ushort*, int, const char*, int, QByteArray*, qbytearray_set);
};

extern "C" {
    NetworkHandle::Private* network_handle_new(NetworkHandle*, void (*)(NetworkHandle*), void (*)(NetworkHandle*), void (*)(NetworkHandle*), void (*)(NetworkHandle*), void (*)(NetworkHandle*), void (*)(NetworkHandle*), void (*)(NetworkHandle*));
    void network_handle_free(NetworkHandle::Private*);
    bool network_handle_connection_pending_get(const NetworkHandle::Private*);
    bool network_handle_connection_up_get(const NetworkHandle::Private*);
    quint64 network_handle_new_add_contact_resp_get(const NetworkHandle::Private*);
    quint64 network_handle_new_add_conv_resp_get(const NetworkHandle::Private*);
    quint64 network_handle_new_contact_get(const NetworkHandle::Private*);
    bool network_handle_new_conv_data_get(const NetworkHandle::Private*);
    quint64 network_handle_new_conversation_get(const NetworkHandle::Private*);
    bool network_handle_login(NetworkHandle::Private*);
    void network_handle_next_add_contact_resp(NetworkHandle::Private*, QByteArray*, qbytearray_set);
    void network_handle_next_add_conversation_resp(NetworkHandle::Private*, QByteArray*, qbytearray_set);
    void network_handle_next_new_contact(NetworkHandle::Private*, QString*, qstring_set);
    void network_handle_next_new_conversation(NetworkHandle::Private*, QByteArray*, qbytearray_set);
    bool network_handle_register_new_user(NetworkHandle::Private*, const ushort*, int);
    bool network_handle_send_add_request(const NetworkHandle::Private*, const ushort*, int, const char*, int);
    bool network_handle_send_message(const NetworkHandle::Private*, const ushort*, int, const char*, int, const char*, int);
};

extern "C" {
    quint32 users_data_color(const Users::Private*, int);
    bool users_set_data_color(Users::Private*, int, quint32);
    void users_data_display_name(const Users::Private*, int, QString*, qstring_set);
    bool users_data_matched(const Users::Private*, int);
    bool users_set_data_matched(Users::Private*, int, bool);
    void users_data_name(const Users::Private*, int, QString*, qstring_set);
    bool users_set_data_name(Users::Private*, int, const ushort* s, int len);
    bool users_set_data_name_none(Users::Private*, int);
    void users_data_pairwise_conversation_id(const Users::Private*, int, QByteArray*, qbytearray_set);
    void users_data_profile_picture(const Users::Private*, int, QString*, qstring_set);
    bool users_set_data_profile_picture(Users::Private*, int, const ushort* s, int len);
    bool users_set_data_profile_picture_none(Users::Private*, int);
    quint8 users_data_status(const Users::Private*, int);
    bool users_set_data_status(Users::Private*, int, quint8);
    void users_data_user_id(const Users::Private*, int, QString*, qstring_set);
    void users_sort(Users::Private*, unsigned char column, Qt::SortOrder order = Qt::AscendingOrder);

    int users_row_count(const Users::Private*);
    bool users_insert_rows(Users::Private*, int, int);
    bool users_remove_rows(Users::Private*, int, int);
    bool users_can_fetch_more(const Users::Private*);
    void users_fetch_more(Users::Private*);
}
int Users::columnCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : 1;
}

bool Users::hasChildren(const QModelIndex &parent) const
{
    return rowCount(parent) > 0;
}

int Users::rowCount(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : users_row_count(m_d);
}

bool Users::insertRows(int row, int count, const QModelIndex &)
{
    return users_insert_rows(m_d, row, count);
}

bool Users::removeRows(int row, int count, const QModelIndex &)
{
    return users_remove_rows(m_d, row, count);
}

QModelIndex Users::index(int row, int column, const QModelIndex &parent) const
{
    if (!parent.isValid() && row >= 0 && row < rowCount(parent) && column >= 0 && column < 1) {
        return createIndex(row, column, (quintptr)row);
    }
    return QModelIndex();
}

QModelIndex Users::parent(const QModelIndex &) const
{
    return QModelIndex();
}

bool Users::canFetchMore(const QModelIndex &parent) const
{
    return (parent.isValid()) ? 0 : users_can_fetch_more(m_d);
}

void Users::fetchMore(const QModelIndex &parent)
{
    if (!parent.isValid()) {
        users_fetch_more(m_d);
    }
}
void Users::updatePersistentIndexes() {}

void Users::sort(int column, Qt::SortOrder order)
{
    users_sort(m_d, column, order);
}
Qt::ItemFlags Users::flags(const QModelIndex &i) const
{
    auto flags = QAbstractItemModel::flags(i);
    if (i.column() == 0) {
        flags |= Qt::ItemIsEditable;
    }
    return flags;
}

quint32 Users::color(int row) const
{
    return users_data_color(m_d, row);
}

bool Users::setColor(int row, quint32 value)
{
    bool set = false;
    set = users_set_data_color(m_d, row, value);
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QString Users::displayName(int row) const
{
    QString s;
    users_data_display_name(m_d, row, &s, set_qstring);
    return s;
}

bool Users::matched(int row) const
{
    return users_data_matched(m_d, row);
}

bool Users::setMatched(int row, bool value)
{
    bool set = false;
    set = users_set_data_matched(m_d, row, value);
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QString Users::name(int row) const
{
    QString s;
    users_data_name(m_d, row, &s, set_qstring);
    return s;
}

bool Users::setName(int row, const QString& value)
{
    bool set = false;
    if (value.isNull()) {
        set = users_set_data_name_none(m_d, row);
    } else {
    set = users_set_data_name(m_d, row, value.utf16(), value.length());
    }
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QByteArray Users::pairwiseConversationId(int row) const
{
    QByteArray b;
    users_data_pairwise_conversation_id(m_d, row, &b, set_qbytearray);
    return b;
}

QString Users::profilePicture(int row) const
{
    QString s;
    users_data_profile_picture(m_d, row, &s, set_qstring);
    return s;
}

bool Users::setProfilePicture(int row, const QString& value)
{
    bool set = false;
    if (value.isNull()) {
        set = users_set_data_profile_picture_none(m_d, row);
    } else {
    set = users_set_data_profile_picture(m_d, row, value.utf16(), value.length());
    }
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

quint8 Users::status(int row) const
{
    return users_data_status(m_d, row);
}

bool Users::setStatus(int row, quint8 value)
{
    bool set = false;
    set = users_set_data_status(m_d, row, value);
    if (set) {
        QModelIndex index = createIndex(row, 0, row);
        Q_EMIT dataChanged(index, index);
    }
    return set;
}

QString Users::userId(int row) const
{
    QString s;
    users_data_user_id(m_d, row, &s, set_qstring);
    return s;
}

QVariant Users::data(const QModelIndex &index, int role) const
{
    Q_ASSERT(rowCount(index.parent()) > index.row());
    switch (index.column()) {
    case 0:
        switch (role) {
        case Qt::UserRole + 0:
            return QVariant::fromValue(color(index.row()));
        case Qt::UserRole + 1:
            return QVariant::fromValue(displayName(index.row()));
        case Qt::UserRole + 2:
            return QVariant::fromValue(matched(index.row()));
        case Qt::UserRole + 3:
            return cleanNullQVariant(QVariant::fromValue(name(index.row())));
        case Qt::UserRole + 4:
            return QVariant::fromValue(pairwiseConversationId(index.row()));
        case Qt::UserRole + 5:
            return cleanNullQVariant(QVariant::fromValue(profilePicture(index.row())));
        case Qt::UserRole + 6:
            return QVariant::fromValue(status(index.row()));
        case Qt::UserRole + 7:
            return QVariant::fromValue(userId(index.row()));
        }
        break;
    }
    return QVariant();
}

int Users::role(const char* name) const {
    auto names = roleNames();
    auto i = names.constBegin();
    while (i != names.constEnd()) {
        if (i.value() == name) {
            return i.key();
        }
        ++i;
    }
    return -1;
}
QHash<int, QByteArray> Users::roleNames() const {
    QHash<int, QByteArray> names = QAbstractItemModel::roleNames();
    names.insert(Qt::UserRole + 0, "color");
    names.insert(Qt::UserRole + 1, "displayName");
    names.insert(Qt::UserRole + 2, "matched");
    names.insert(Qt::UserRole + 3, "name");
    names.insert(Qt::UserRole + 4, "pairwiseConversationId");
    names.insert(Qt::UserRole + 5, "profilePicture");
    names.insert(Qt::UserRole + 6, "status");
    names.insert(Qt::UserRole + 7, "userId");
    return names;
}
QVariant Users::headerData(int section, Qt::Orientation orientation, int role) const
{
    if (orientation != Qt::Horizontal) {
        return QVariant();
    }
    return m_headerData.value(qMakePair(section, (Qt::ItemDataRole)role), role == Qt::DisplayRole ?QString::number(section + 1) :QVariant());
}

bool Users::setHeaderData(int section, Qt::Orientation orientation, const QVariant &value, int role)
{
    if (orientation != Qt::Horizontal) {
        return false;
    }
    m_headerData.insert(qMakePair(section, (Qt::ItemDataRole)role), value);
    return true;
}

bool Users::setData(const QModelIndex &index, const QVariant &value, int role)
{
    if (index.column() == 0) {
        if (role == Qt::UserRole + 0) {
            if (value.canConvert(qMetaTypeId<quint32>())) {
                return setColor(index.row(), value.value<quint32>());
            }
        }
        if (role == Qt::UserRole + 2) {
            if (value.canConvert(qMetaTypeId<bool>())) {
                return setMatched(index.row(), value.value<bool>());
            }
        }
        if (role == Qt::UserRole + 3) {
            if (!value.isValid() || value.isNull() ||value.canConvert(qMetaTypeId<QString>())) {
                return setName(index.row(), value.value<QString>());
            }
        }
        if (role == Qt::UserRole + 5) {
            if (!value.isValid() || value.isNull() ||value.canConvert(qMetaTypeId<QString>())) {
                return setProfilePicture(index.row(), value.value<QString>());
            }
        }
        if (role == Qt::UserRole + 6) {
            if (value.canConvert(qMetaTypeId<quint8>())) {
                return setStatus(index.row(), value.value<quint8>());
            }
        }
    }
    return false;
}

extern "C" {
    Users::Private* users_new(Users*, void (*)(Users*), void (*)(Users*), void (*)(Users*),
        void (*)(const Users*),
        void (*)(Users*),
        void (*)(Users*),
        void (*)(Users*, quintptr, quintptr),
        void (*)(Users*),
        void (*)(Users*),
        void (*)(Users*, int, int),
        void (*)(Users*),
        void (*)(Users*, int, int, int),
        void (*)(Users*),
        void (*)(Users*, int, int),
        void (*)(Users*));
    void users_free(Users::Private*);
    void users_conversation_id_get(const Users::Private*, QByteArray*, qbytearray_set);
    void users_conversation_id_set(Users::Private*, const char* bytes, int len);
    void users_conversation_id_set_none(Users::Private*);
    void users_filter_get(const Users::Private*, QString*, qstring_set);
    void users_filter_set(Users::Private*, const ushort *str, int len);
    bool users_filter_regex_get(const Users::Private*);
    void users_filter_regex_set(Users::Private*, bool);
    void users_add(Users::Private*, const ushort*, int, QByteArray*, qbytearray_set);
    bool users_add_to_conversation(Users::Private*, const ushort*, int);
    bool users_add_to_conversation_by_id(Users::Private*, const ushort*, int, const char*, int);
    bool users_add_to_conversation_by_index(Users::Private*, quint64, const char*, int);
    bool users_bulk_add_to_conversation(Users::Private*, const char*, int, const char*, int);
    qint64 users_index_from_conversation_id(const Users::Private*, const char*, int);
    bool users_refresh(Users::Private*, const ushort*, int);
    bool users_remove_from_conversation(Users::Private*, quint64, const char*, int);
    bool users_toggle_filter_regex(Users::Private*);
};

Config::Config(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

Config::Config(QObject *parent):
    QObject(parent),
    m_d(config_new(this,
        configColorChanged,
        configColorschemeChanged,
        configConfigIdChanged,
        configDisplayNameChanged,
        configNameChanged,
        configProfilePictureChanged)),
    m_ownsPrivate(true)
{
}

Config::~Config() {
    if (m_ownsPrivate) {
        config_free(m_d);
    }
}
quint32 Config::color() const
{
    return config_color_get(m_d);
}
void Config::setColor(quint32 v) {
    config_color_set(m_d, v);
}
quint32 Config::colorscheme() const
{
    return config_colorscheme_get(m_d);
}
void Config::setColorscheme(quint32 v) {
    config_colorscheme_set(m_d, v);
}
QString Config::configId() const
{
    QString v;
    config_config_id_get(m_d, &v, set_qstring);
    return v;
}
QString Config::displayName() const
{
    QString v;
    config_display_name_get(m_d, &v, set_qstring);
    return v;
}
QString Config::name() const
{
    QString v;
    config_name_get(m_d, &v, set_qstring);
    return v;
}
void Config::setName(const QString& v) {
    if (v.isNull()) {
        config_name_set_none(m_d);
    } else {
    config_name_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
    }
}
QString Config::profilePicture() const
{
    QString v;
    config_profile_picture_get(m_d, &v, set_qstring);
    return v;
}
void Config::setProfilePicture(const QString& v) {
    if (v.isNull()) {
        config_profile_picture_set_none(m_d);
    } else {
    config_profile_picture_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
    }
}
Conversations::Conversations(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Conversations::Conversations(QObject *parent):
    QAbstractItemModel(parent),
    m_d(conversations_new(this,
        conversationsFilterChanged,
        conversationsFilterRegexChanged,
        [](const Conversations* o) {
            Q_EMIT o->newDataReady(QModelIndex());
        },
        [](Conversations* o) {
            Q_EMIT o->layoutAboutToBeChanged();
        },
        [](Conversations* o) {
            o->updatePersistentIndexes();
            Q_EMIT o->layoutChanged();
        },
        [](Conversations* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Conversations* o) {
            o->beginResetModel();
        },
        [](Conversations* o) {
            o->endResetModel();
        },
        [](Conversations* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Conversations* o) {
            o->endInsertRows();
        },
        [](Conversations* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](Conversations* o) {
            o->endMoveRows();
        },
        [](Conversations* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Conversations* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Conversations::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Conversations::~Conversations() {
    if (m_ownsPrivate) {
        conversations_free(m_d);
    }
}
void Conversations::initHeaderData() {
}
QString Conversations::filter() const
{
    QString v;
    conversations_filter_get(m_d, &v, set_qstring);
    return v;
}
void Conversations::setFilter(const QString& v) {
    conversations_filter_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
}
bool Conversations::filterRegex() const
{
    return conversations_filter_regex_get(m_d);
}
void Conversations::setFilterRegex(bool v) {
    conversations_filter_regex_set(m_d, v);
}
QByteArray Conversations::addConversation()
{
    QByteArray s;
    conversations_add_conversation(m_d, &s, set_qbytearray);
    return s;
}
bool Conversations::handleContactReqAck(const QByteArray& notif)
{
    return conversations_handle_contact_req_ack(m_d, notif.data(), notif.size());
}
bool Conversations::refresh(const QByteArray& notif_conv_id)
{
    return conversations_refresh(m_d, notif_conv_id.data(), notif_conv_id.size());
}
bool Conversations::removeConversation(quint64 row_index)
{
    return conversations_remove_conversation(m_d, row_index);
}
bool Conversations::toggleFilterRegex()
{
    return conversations_toggle_filter_regex(m_d);
}
HeraldState::HeraldState(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

HeraldState::HeraldState(QObject *parent):
    QObject(parent),
    m_d(herald_state_new(this,
        heraldStateConfigInitChanged)),
    m_ownsPrivate(true)
{
}

HeraldState::~HeraldState() {
    if (m_ownsPrivate) {
        herald_state_free(m_d);
    }
}
bool HeraldState::configInit() const
{
    return herald_state_config_init_get(m_d);
}
void HeraldState::setConfigInit(bool v) {
    herald_state_config_init_set(m_d, v);
}
HeraldUtils::HeraldUtils(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

HeraldUtils::HeraldUtils(QObject *parent):
    QObject(parent),
    m_d(herald_utils_new(this)),
    m_ownsPrivate(true)
{
}

HeraldUtils::~HeraldUtils() {
    if (m_ownsPrivate) {
        herald_utils_free(m_d);
    }
}
double HeraldUtils::chatBubbleNaturalWidth(double chat_pane_width, double text_width) const
{
    return herald_utils_chat_bubble_natural_width(m_d, chat_pane_width, text_width);
}
bool HeraldUtils::compareByteArray(const QByteArray& bs1, const QByteArray& bs2) const
{
    return herald_utils_compare_byte_array(m_d, bs1.data(), bs1.size(), bs2.data(), bs2.size());
}
bool HeraldUtils::isValidRandId(const QByteArray& bs) const
{
    return herald_utils_is_valid_rand_id(m_d, bs.data(), bs.size());
}
Messages::Messages(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Messages::Messages(QObject *parent):
    QAbstractItemModel(parent),
    m_d(messages_new(this,
        messagesConversationIdChanged,
        messagesLastAuthorChanged,
        messagesLastBodyChanged,
        messagesLastEpochTimestampMsChanged,
        messagesLastStatusChanged,
        [](const Messages* o) {
            Q_EMIT o->newDataReady(QModelIndex());
        },
        [](Messages* o) {
            Q_EMIT o->layoutAboutToBeChanged();
        },
        [](Messages* o) {
            o->updatePersistentIndexes();
            Q_EMIT o->layoutChanged();
        },
        [](Messages* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Messages* o) {
            o->beginResetModel();
        },
        [](Messages* o) {
            o->endResetModel();
        },
        [](Messages* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Messages* o) {
            o->endInsertRows();
        },
        [](Messages* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](Messages* o) {
            o->endMoveRows();
        },
        [](Messages* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Messages* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Messages::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Messages::~Messages() {
    if (m_ownsPrivate) {
        messages_free(m_d);
    }
}
void Messages::initHeaderData() {
}
QByteArray Messages::conversationId() const
{
    QByteArray v;
    messages_conversation_id_get(m_d, &v, set_qbytearray);
    return v;
}
void Messages::setConversationId(const QByteArray& v) {
    if (v.isNull()) {
        messages_conversation_id_set_none(m_d);
    } else {
    messages_conversation_id_set(m_d, v.data(), v.size());
    }
}
QString Messages::lastAuthor() const
{
    QString v;
    messages_last_author_get(m_d, &v, set_qstring);
    return v;
}
QString Messages::lastBody() const
{
    QString v;
    messages_last_body_get(m_d, &v, set_qstring);
    return v;
}
QVariant Messages::lastEpochTimestampMs() const
{
    QVariant v;
    auto r = messages_last_epoch_timestamp_ms_get(m_d);
    if (r.some) {
        v.setValue(r.value);
    }
    return r;
}
QVariant Messages::lastStatus() const
{
    QVariant v;
    auto r = messages_last_status_get(m_d);
    if (r.some) {
        v.setValue(r.value);
    }
    return r;
}
bool Messages::clearConversationHistory()
{
    return messages_clear_conversation_history(m_d);
}
void Messages::clearConversationView()
{
    return messages_clear_conversation_view(m_d);
}
bool Messages::deleteMessage(quint64 row_index)
{
    return messages_delete_message(m_d, row_index);
}
QByteArray Messages::insertMessage(const QString& body)
{
    QByteArray s;
    messages_insert_message(m_d, body.utf16(), body.size(), &s, set_qbytearray);
    return s;
}
QString Messages::messageBodyById(const QByteArray& msg_id) const
{
    QString s;
    messages_message_body_by_id(m_d, msg_id.data(), msg_id.size(), &s, set_qstring);
    return s;
}
bool Messages::pollUpdate()
{
    return messages_poll_update(m_d);
}
QByteArray Messages::reply(const QString& body, const QByteArray& op)
{
    QByteArray s;
    messages_reply(m_d, body.utf16(), body.size(), op.data(), op.size(), &s, set_qbytearray);
    return s;
}
NetworkHandle::NetworkHandle(bool /*owned*/, QObject *parent):
    QObject(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
}

NetworkHandle::NetworkHandle(QObject *parent):
    QObject(parent),
    m_d(network_handle_new(this,
        networkHandleConnectionPendingChanged,
        networkHandleConnectionUpChanged,
        networkHandleNewAddContactRespChanged,
        networkHandleNewAddConvRespChanged,
        networkHandleNewContactChanged,
        networkHandleNewConvDataChanged,
        networkHandleNewConversationChanged)),
    m_ownsPrivate(true)
{
}

NetworkHandle::~NetworkHandle() {
    if (m_ownsPrivate) {
        network_handle_free(m_d);
    }
}
bool NetworkHandle::connectionPending() const
{
    return network_handle_connection_pending_get(m_d);
}
bool NetworkHandle::connectionUp() const
{
    return network_handle_connection_up_get(m_d);
}
quint64 NetworkHandle::newAddContactResp() const
{
    return network_handle_new_add_contact_resp_get(m_d);
}
quint64 NetworkHandle::newAddConvResp() const
{
    return network_handle_new_add_conv_resp_get(m_d);
}
quint64 NetworkHandle::newContact() const
{
    return network_handle_new_contact_get(m_d);
}
bool NetworkHandle::newConvData() const
{
    return network_handle_new_conv_data_get(m_d);
}
quint64 NetworkHandle::newConversation() const
{
    return network_handle_new_conversation_get(m_d);
}
bool NetworkHandle::login()
{
    return network_handle_login(m_d);
}
QByteArray NetworkHandle::nextAddContactResp()
{
    QByteArray s;
    network_handle_next_add_contact_resp(m_d, &s, set_qbytearray);
    return s;
}
QByteArray NetworkHandle::nextAddConversationResp()
{
    QByteArray s;
    network_handle_next_add_conversation_resp(m_d, &s, set_qbytearray);
    return s;
}
QString NetworkHandle::nextNewContact()
{
    QString s;
    network_handle_next_new_contact(m_d, &s, set_qstring);
    return s;
}
QByteArray NetworkHandle::nextNewConversation()
{
    QByteArray s;
    network_handle_next_new_conversation(m_d, &s, set_qbytearray);
    return s;
}
bool NetworkHandle::registerNewUser(const QString& user_id)
{
    return network_handle_register_new_user(m_d, user_id.utf16(), user_id.size());
}
bool NetworkHandle::sendAddRequest(const QString& user_id, const QByteArray& conversation_id) const
{
    return network_handle_send_add_request(m_d, user_id.utf16(), user_id.size(), conversation_id.data(), conversation_id.size());
}
bool NetworkHandle::sendMessage(const QString& message_body, const QByteArray& to, const QByteArray& msg_id) const
{
    return network_handle_send_message(m_d, message_body.utf16(), message_body.size(), to.data(), to.size(), msg_id.data(), msg_id.size());
}
Users::Users(bool /*owned*/, QObject *parent):
    QAbstractItemModel(parent),
    m_d(nullptr),
    m_ownsPrivate(false)
{
    initHeaderData();
}

Users::Users(QObject *parent):
    QAbstractItemModel(parent),
    m_d(users_new(this,
        usersConversationIdChanged,
        usersFilterChanged,
        usersFilterRegexChanged,
        [](const Users* o) {
            Q_EMIT o->newDataReady(QModelIndex());
        },
        [](Users* o) {
            Q_EMIT o->layoutAboutToBeChanged();
        },
        [](Users* o) {
            o->updatePersistentIndexes();
            Q_EMIT o->layoutChanged();
        },
        [](Users* o, quintptr first, quintptr last) {
            o->dataChanged(o->createIndex(first, 0, first),
                       o->createIndex(last, 0, last));
        },
        [](Users* o) {
            o->beginResetModel();
        },
        [](Users* o) {
            o->endResetModel();
        },
        [](Users* o, int first, int last) {
            o->beginInsertRows(QModelIndex(), first, last);
        },
        [](Users* o) {
            o->endInsertRows();
        },
        [](Users* o, int first, int last, int destination) {
            o->beginMoveRows(QModelIndex(), first, last, QModelIndex(), destination);
        },
        [](Users* o) {
            o->endMoveRows();
        },
        [](Users* o, int first, int last) {
            o->beginRemoveRows(QModelIndex(), first, last);
        },
        [](Users* o) {
            o->endRemoveRows();
        }
)),
    m_ownsPrivate(true)
{
    connect(this, &Users::newDataReady, this, [this](const QModelIndex& i) {
        this->fetchMore(i);
    }, Qt::QueuedConnection);
    initHeaderData();
}

Users::~Users() {
    if (m_ownsPrivate) {
        users_free(m_d);
    }
}
void Users::initHeaderData() {
}
QByteArray Users::conversationId() const
{
    QByteArray v;
    users_conversation_id_get(m_d, &v, set_qbytearray);
    return v;
}
void Users::setConversationId(const QByteArray& v) {
    if (v.isNull()) {
        users_conversation_id_set_none(m_d);
    } else {
    users_conversation_id_set(m_d, v.data(), v.size());
    }
}
QString Users::filter() const
{
    QString v;
    users_filter_get(m_d, &v, set_qstring);
    return v;
}
void Users::setFilter(const QString& v) {
    users_filter_set(m_d, reinterpret_cast<const ushort*>(v.data()), v.size());
}
bool Users::filterRegex() const
{
    return users_filter_regex_get(m_d);
}
void Users::setFilterRegex(bool v) {
    users_filter_regex_set(m_d, v);
}
QByteArray Users::add(const QString& id)
{
    QByteArray s;
    users_add(m_d, id.utf16(), id.size(), &s, set_qbytearray);
    return s;
}
bool Users::addToConversation(const QString& user_id)
{
    return users_add_to_conversation(m_d, user_id.utf16(), user_id.size());
}
bool Users::addToConversationById(const QString& user_id, const QByteArray& conversation_id)
{
    return users_add_to_conversation_by_id(m_d, user_id.utf16(), user_id.size(), conversation_id.data(), conversation_id.size());
}
bool Users::addToConversationByIndex(quint64 row_index, const QByteArray& conversation_id)
{
    return users_add_to_conversation_by_index(m_d, row_index, conversation_id.data(), conversation_id.size());
}
bool Users::bulkAddToConversation(const QByteArray& user_id_array, const QByteArray& conversation_id)
{
    return users_bulk_add_to_conversation(m_d, user_id_array.data(), user_id_array.size(), conversation_id.data(), conversation_id.size());
}
qint64 Users::indexFromConversationId(const QByteArray& conversation_id) const
{
    return users_index_from_conversation_id(m_d, conversation_id.data(), conversation_id.size());
}
bool Users::refresh(const QString& notif_user_id)
{
    return users_refresh(m_d, notif_user_id.utf16(), notif_user_id.size());
}
bool Users::removeFromConversation(quint64 row_index, const QByteArray& conversation_id)
{
    return users_remove_from_conversation(m_d, row_index, conversation_id.data(), conversation_id.size());
}
bool Users::toggleFilterRegex()
{
    return users_toggle_filter_regex(m_d);
}
