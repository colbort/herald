/* generated by rust_qt_binding_generator */
use libc::{c_char, c_int, c_ushort};
use std::{char::decode_utf16, slice};

use std::{
    ptr::null,
    sync::{
        atomic::{AtomicPtr, Ordering},
        Arc,
    },
};

use crate::implementation::*;

#[repr(C)]
pub struct COption<T> {
    data: T,
    some: bool,
}

impl<T> COption<T> {
    #![allow(dead_code)]
    fn into(self) -> Option<T> {
        if self.some {
            Some(self.data)
        } else {
            None
        }
    }
}

impl<T> From<Option<T>> for COption<T>
where
    T: Default,
{
    fn from(t: Option<T>) -> COption<T> {
        if let Some(v) = t {
            COption {
                data: v,
                some: true,
            }
        } else {
            COption {
                data: T::default(),
                some: false,
            }
        }
    }
}

pub enum QString {}

fn set_string_from_utf16(s: &mut String, str: *const c_ushort, len: c_int) {
    let utf16 = unsafe { slice::from_raw_parts(str, to_usize(len)) };
    let characters = decode_utf16(utf16.iter().cloned()).map(|r| r.unwrap());
    s.clear();
    s.extend(characters);
}

pub enum QByteArray {}

#[repr(C)]
#[derive(PartialEq, Eq, Debug)]
pub enum SortOrder {
    Ascending = 0,
    Descending = 1,
}

#[repr(C)]
pub struct QModelIndex {
    row: c_int,
    internal_id: usize,
}

fn to_usize(n: c_int) -> usize {
    if n < 0 {
        panic!("Cannot cast {} to usize", n);
    }
    n as usize
}

fn to_c_int(n: usize) -> c_int {
    if n > c_int::max_value() as usize {
        panic!("Cannot cast {} to c_int", n);
    }
    n as c_int
}

pub struct ConfigQObject {}

pub struct ConfigEmitter {
    qobject: Arc<AtomicPtr<ConfigQObject>>,
    color_changed: fn(*mut ConfigQObject),
    colorscheme_changed: fn(*mut ConfigQObject),
    config_id_changed: fn(*mut ConfigQObject),
    name_changed: fn(*mut ConfigQObject),
    profile_picture_changed: fn(*mut ConfigQObject),
}

unsafe impl Send for ConfigEmitter {}

impl ConfigEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> ConfigEmitter {
        ConfigEmitter {
            qobject: self.qobject.clone(),
            color_changed: self.color_changed,
            colorscheme_changed: self.colorscheme_changed,
            config_id_changed: self.config_id_changed,
            name_changed: self.name_changed,
            profile_picture_changed: self.profile_picture_changed,
        }
    }
    fn clear(&self) {
        let n: *const ConfigQObject = null();
        self.qobject
            .store(n as *mut ConfigQObject, Ordering::SeqCst);
    }
    pub fn color_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.color_changed)(ptr);
        }
    }
    pub fn colorscheme_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.colorscheme_changed)(ptr);
        }
    }
    pub fn config_id_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.config_id_changed)(ptr);
        }
    }
    pub fn name_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.name_changed)(ptr);
        }
    }
    pub fn profile_picture_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.profile_picture_changed)(ptr);
        }
    }
}

pub trait ConfigTrait {
    fn new(emit: ConfigEmitter) -> Self;
    fn emit(&mut self) -> &mut ConfigEmitter;
    fn color(&self) -> u32;
    fn set_color(&mut self, value: u32);
    fn colorscheme(&self) -> u32;
    fn set_colorscheme(&mut self, value: u32);
    fn config_id(&self) -> &str;
    fn name(&self) -> Option<&str>;
    fn set_name(&mut self, value: Option<String>);
    fn profile_picture(&self) -> Option<&str>;
    fn set_profile_picture(&mut self, value: Option<String>);
}

#[no_mangle]
pub extern "C" fn config_new(
    config: *mut ConfigQObject,
    config_color_changed: fn(*mut ConfigQObject),
    config_colorscheme_changed: fn(*mut ConfigQObject),
    config_config_id_changed: fn(*mut ConfigQObject),
    config_name_changed: fn(*mut ConfigQObject),
    config_profile_picture_changed: fn(*mut ConfigQObject),
) -> *mut Config {
    let config_emit = ConfigEmitter {
        qobject: Arc::new(AtomicPtr::new(config)),
        color_changed: config_color_changed,
        colorscheme_changed: config_colorscheme_changed,
        config_id_changed: config_config_id_changed,
        name_changed: config_name_changed,
        profile_picture_changed: config_profile_picture_changed,
    };
    let d_config = Config::new(config_emit);
    Box::into_raw(Box::new(d_config))
}

#[no_mangle]
pub unsafe extern "C" fn config_free(ptr: *mut Config) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn config_color_get(ptr: *const Config) -> u32 {
    (&*ptr).color()
}

#[no_mangle]
pub unsafe extern "C" fn config_color_set(ptr: *mut Config, v: u32) {
    (&mut *ptr).set_color(v);
}

#[no_mangle]
pub unsafe extern "C" fn config_colorscheme_get(ptr: *const Config) -> u32 {
    (&*ptr).colorscheme()
}

#[no_mangle]
pub unsafe extern "C" fn config_colorscheme_set(ptr: *mut Config, v: u32) {
    (&mut *ptr).set_colorscheme(v);
}

#[no_mangle]
pub unsafe extern "C" fn config_config_id_get(
    ptr: *const Config,
    p: *mut QString,
    set: fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.config_id();
    let s: *const c_char = v.as_ptr() as (*const c_char);
    set(p, s, to_c_int(v.len()));
}

#[no_mangle]
pub unsafe extern "C" fn config_name_get(
    ptr: *const Config,
    p: *mut QString,
    set: fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.name();
    if let Some(v) = v {
        let s: *const c_char = v.as_ptr() as (*const c_char);
        set(p, s, to_c_int(v.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn config_name_set(ptr: *mut Config, v: *const c_ushort, len: c_int) {
    let o = &mut *ptr;
    let mut s = String::new();
    set_string_from_utf16(&mut s, v, len);
    o.set_name(Some(s));
}

#[no_mangle]
pub unsafe extern "C" fn config_name_set_none(ptr: *mut Config) {
    let o = &mut *ptr;
    o.set_name(None);
}

#[no_mangle]
pub unsafe extern "C" fn config_profile_picture_get(
    ptr: *const Config,
    p: *mut QString,
    set: fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.profile_picture();
    if let Some(v) = v {
        let s: *const c_char = v.as_ptr() as (*const c_char);
        set(p, s, to_c_int(v.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn config_profile_picture_set(
    ptr: *mut Config,
    v: *const c_ushort,
    len: c_int,
) {
    let o = &mut *ptr;
    let mut s = String::new();
    set_string_from_utf16(&mut s, v, len);
    o.set_profile_picture(Some(s));
}

#[no_mangle]
pub unsafe extern "C" fn config_profile_picture_set_none(ptr: *mut Config) {
    let o = &mut *ptr;
    o.set_profile_picture(None);
}

pub struct ConversationsQObject {}

pub struct ConversationsEmitter {
    qobject: Arc<AtomicPtr<ConversationsQObject>>,
    new_data_ready: fn(*mut ConversationsQObject),
}

unsafe impl Send for ConversationsEmitter {}

impl ConversationsEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> ConversationsEmitter {
        ConversationsEmitter {
            qobject: self.qobject.clone(),
            new_data_ready: self.new_data_ready,
        }
    }
    fn clear(&self) {
        let n: *const ConversationsQObject = null();
        self.qobject
            .store(n as *mut ConversationsQObject, Ordering::SeqCst);
    }
    pub fn new_data_ready(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.new_data_ready)(ptr);
        }
    }
}

#[derive(Clone)]
pub struct ConversationsList {
    qobject: *mut ConversationsQObject,
    layout_about_to_be_changed: fn(*mut ConversationsQObject),
    layout_changed: fn(*mut ConversationsQObject),
    data_changed: fn(*mut ConversationsQObject, usize, usize),
    begin_reset_model: fn(*mut ConversationsQObject),
    end_reset_model: fn(*mut ConversationsQObject),
    begin_insert_rows: fn(*mut ConversationsQObject, usize, usize),
    end_insert_rows: fn(*mut ConversationsQObject),
    begin_move_rows: fn(*mut ConversationsQObject, usize, usize, usize),
    end_move_rows: fn(*mut ConversationsQObject),
    begin_remove_rows: fn(*mut ConversationsQObject, usize, usize),
    end_remove_rows: fn(*mut ConversationsQObject),
}

impl ConversationsList {
    pub fn layout_about_to_be_changed(&mut self) {
        (self.layout_about_to_be_changed)(self.qobject);
    }
    pub fn layout_changed(&mut self) {
        (self.layout_changed)(self.qobject);
    }
    pub fn data_changed(&mut self, first: usize, last: usize) {
        (self.data_changed)(self.qobject, first, last);
    }
    pub fn begin_reset_model(&mut self) {
        (self.begin_reset_model)(self.qobject);
    }
    pub fn end_reset_model(&mut self) {
        (self.end_reset_model)(self.qobject);
    }
    pub fn begin_insert_rows(&mut self, first: usize, last: usize) {
        (self.begin_insert_rows)(self.qobject, first, last);
    }
    pub fn end_insert_rows(&mut self) {
        (self.end_insert_rows)(self.qobject);
    }
    pub fn begin_move_rows(&mut self, first: usize, last: usize, destination: usize) {
        (self.begin_move_rows)(self.qobject, first, last, destination);
    }
    pub fn end_move_rows(&mut self) {
        (self.end_move_rows)(self.qobject);
    }
    pub fn begin_remove_rows(&mut self, first: usize, last: usize) {
        (self.begin_remove_rows)(self.qobject, first, last);
    }
    pub fn end_remove_rows(&mut self) {
        (self.end_remove_rows)(self.qobject);
    }
}

pub trait ConversationsTrait {
    fn new(emit: ConversationsEmitter, model: ConversationsList) -> Self;
    fn emit(&mut self) -> &mut ConversationsEmitter;
    fn add_conversation(&mut self) -> bool;
    fn remove_conversation(&mut self, row_index: u64) -> bool;
    fn row_count(&self) -> usize;
    fn insert_rows(&mut self, _row: usize, _count: usize) -> bool {
        false
    }
    fn remove_rows(&mut self, _row: usize, _count: usize) -> bool {
        false
    }
    fn can_fetch_more(&self) -> bool {
        false
    }
    fn fetch_more(&mut self) {}
    fn sort(&mut self, _: u8, _: SortOrder) {}
    fn color(&self, index: usize) -> u32;
    fn set_color(&mut self, index: usize, _: u32) -> bool;
    fn conversation_id(&self, index: usize) -> &[u8];
    fn muted(&self, index: usize) -> bool;
    fn set_muted(&mut self, index: usize, _: bool) -> bool;
    fn pairwise(&self, index: usize) -> bool;
    fn picture(&self, index: usize) -> Option<&str>;
    fn set_picture(&mut self, index: usize, _: Option<String>) -> bool;
    fn title(&self, index: usize) -> Option<&str>;
    fn set_title(&mut self, index: usize, _: Option<String>) -> bool;
}

#[no_mangle]
pub extern "C" fn conversations_new(
    conversations: *mut ConversationsQObject,
    conversations_new_data_ready: fn(*mut ConversationsQObject),
    conversations_layout_about_to_be_changed: fn(*mut ConversationsQObject),
    conversations_layout_changed: fn(*mut ConversationsQObject),
    conversations_data_changed: fn(*mut ConversationsQObject, usize, usize),
    conversations_begin_reset_model: fn(*mut ConversationsQObject),
    conversations_end_reset_model: fn(*mut ConversationsQObject),
    conversations_begin_insert_rows: fn(*mut ConversationsQObject, usize, usize),
    conversations_end_insert_rows: fn(*mut ConversationsQObject),
    conversations_begin_move_rows: fn(*mut ConversationsQObject, usize, usize, usize),
    conversations_end_move_rows: fn(*mut ConversationsQObject),
    conversations_begin_remove_rows: fn(*mut ConversationsQObject, usize, usize),
    conversations_end_remove_rows: fn(*mut ConversationsQObject),
) -> *mut Conversations {
    let conversations_emit = ConversationsEmitter {
        qobject: Arc::new(AtomicPtr::new(conversations)),
        new_data_ready: conversations_new_data_ready,
    };
    let model = ConversationsList {
        qobject: conversations,
        layout_about_to_be_changed: conversations_layout_about_to_be_changed,
        layout_changed: conversations_layout_changed,
        data_changed: conversations_data_changed,
        begin_reset_model: conversations_begin_reset_model,
        end_reset_model: conversations_end_reset_model,
        begin_insert_rows: conversations_begin_insert_rows,
        end_insert_rows: conversations_end_insert_rows,
        begin_move_rows: conversations_begin_move_rows,
        end_move_rows: conversations_end_move_rows,
        begin_remove_rows: conversations_begin_remove_rows,
        end_remove_rows: conversations_end_remove_rows,
    };
    let d_conversations = Conversations::new(conversations_emit, model);
    Box::into_raw(Box::new(d_conversations))
}

#[no_mangle]
pub unsafe extern "C" fn conversations_free(ptr: *mut Conversations) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn conversations_add_conversation(ptr: *mut Conversations) -> bool {
    let o = &mut *ptr;
    let r = o.add_conversation();
    r
}

#[no_mangle]
pub unsafe extern "C" fn conversations_remove_conversation(
    ptr: *mut Conversations,
    row_index: u64,
) -> bool {
    let o = &mut *ptr;
    let r = o.remove_conversation(row_index);
    r
}

#[no_mangle]
pub unsafe extern "C" fn conversations_row_count(ptr: *const Conversations) -> c_int {
    to_c_int((&*ptr).row_count())
}
#[no_mangle]
pub unsafe extern "C" fn conversations_insert_rows(
    ptr: *mut Conversations,
    row: c_int,
    count: c_int,
) -> bool {
    (&mut *ptr).insert_rows(to_usize(row), to_usize(count))
}
#[no_mangle]
pub unsafe extern "C" fn conversations_remove_rows(
    ptr: *mut Conversations,
    row: c_int,
    count: c_int,
) -> bool {
    (&mut *ptr).remove_rows(to_usize(row), to_usize(count))
}
#[no_mangle]
pub unsafe extern "C" fn conversations_can_fetch_more(ptr: *const Conversations) -> bool {
    (&*ptr).can_fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn conversations_fetch_more(ptr: *mut Conversations) {
    (&mut *ptr).fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn conversations_sort(ptr: *mut Conversations, column: u8, order: SortOrder) {
    (&mut *ptr).sort(column, order)
}

#[no_mangle]
pub unsafe extern "C" fn conversations_data_color(ptr: *const Conversations, row: c_int) -> u32 {
    let o = &*ptr;
    o.color(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn conversations_set_data_color(
    ptr: *mut Conversations,
    row: c_int,
    v: u32,
) -> bool {
    (&mut *ptr).set_color(to_usize(row), v)
}

#[no_mangle]
pub unsafe extern "C" fn conversations_data_conversation_id(
    ptr: *const Conversations,
    row: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.conversation_id(to_usize(row));
    let s: *const c_char = data.as_ptr() as (*const c_char);
    set(d, s, to_c_int(data.len()));
}

#[no_mangle]
pub unsafe extern "C" fn conversations_data_muted(ptr: *const Conversations, row: c_int) -> bool {
    let o = &*ptr;
    o.muted(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn conversations_set_data_muted(
    ptr: *mut Conversations,
    row: c_int,
    v: bool,
) -> bool {
    (&mut *ptr).set_muted(to_usize(row), v)
}

#[no_mangle]
pub unsafe extern "C" fn conversations_data_pairwise(
    ptr: *const Conversations,
    row: c_int,
) -> bool {
    let o = &*ptr;
    o.pairwise(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn conversations_data_picture(
    ptr: *const Conversations,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.picture(to_usize(row));
    if let Some(data) = data {
        let s: *const c_char = data.as_ptr() as (*const c_char);
        set(d, s, to_c_int(data.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn conversations_set_data_picture(
    ptr: *mut Conversations,
    row: c_int,
    s: *const c_ushort,
    len: c_int,
) -> bool {
    let o = &mut *ptr;
    let mut v = String::new();
    set_string_from_utf16(&mut v, s, len);
    o.set_picture(to_usize(row), Some(v))
}

#[no_mangle]
pub unsafe extern "C" fn conversations_set_data_picture_none(
    ptr: *mut Conversations,
    row: c_int,
) -> bool {
    (&mut *ptr).set_picture(to_usize(row), None)
}

#[no_mangle]
pub unsafe extern "C" fn conversations_data_title(
    ptr: *const Conversations,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.title(to_usize(row));
    if let Some(data) = data {
        let s: *const c_char = data.as_ptr() as (*const c_char);
        set(d, s, to_c_int(data.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn conversations_set_data_title(
    ptr: *mut Conversations,
    row: c_int,
    s: *const c_ushort,
    len: c_int,
) -> bool {
    let o = &mut *ptr;
    let mut v = String::new();
    set_string_from_utf16(&mut v, s, len);
    o.set_title(to_usize(row), Some(v))
}

#[no_mangle]
pub unsafe extern "C" fn conversations_set_data_title_none(
    ptr: *mut Conversations,
    row: c_int,
) -> bool {
    (&mut *ptr).set_title(to_usize(row), None)
}

pub struct HeraldStateQObject {}

pub struct HeraldStateEmitter {
    qobject: Arc<AtomicPtr<HeraldStateQObject>>,
    config_init_changed: fn(*mut HeraldStateQObject),
}

unsafe impl Send for HeraldStateEmitter {}

impl HeraldStateEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> HeraldStateEmitter {
        HeraldStateEmitter {
            qobject: self.qobject.clone(),
            config_init_changed: self.config_init_changed,
        }
    }
    fn clear(&self) {
        let n: *const HeraldStateQObject = null();
        self.qobject
            .store(n as *mut HeraldStateQObject, Ordering::SeqCst);
    }
    pub fn config_init_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.config_init_changed)(ptr);
        }
    }
}

pub trait HeraldStateTrait {
    fn new(emit: HeraldStateEmitter) -> Self;
    fn emit(&mut self) -> &mut HeraldStateEmitter;
    fn config_init(&self) -> bool;
    fn set_config_id(&mut self, config_id: String) -> bool;
}

#[no_mangle]
pub extern "C" fn herald_state_new(
    herald_state: *mut HeraldStateQObject,
    herald_state_config_init_changed: fn(*mut HeraldStateQObject),
) -> *mut HeraldState {
    let herald_state_emit = HeraldStateEmitter {
        qobject: Arc::new(AtomicPtr::new(herald_state)),
        config_init_changed: herald_state_config_init_changed,
    };
    let d_herald_state = HeraldState::new(herald_state_emit);
    Box::into_raw(Box::new(d_herald_state))
}

#[no_mangle]
pub unsafe extern "C" fn herald_state_free(ptr: *mut HeraldState) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn herald_state_config_init_get(ptr: *const HeraldState) -> bool {
    (&*ptr).config_init()
}

#[no_mangle]
pub unsafe extern "C" fn herald_state_set_config_id(
    ptr: *mut HeraldState,
    config_id_str: *const c_ushort,
    config_id_len: c_int,
) -> bool {
    let mut config_id = String::new();
    set_string_from_utf16(&mut config_id, config_id_str, config_id_len);
    let o = &mut *ptr;
    let r = o.set_config_id(config_id);
    r
}

pub struct HeraldUtilsQObject {}

pub struct HeraldUtilsEmitter {
    qobject: Arc<AtomicPtr<HeraldUtilsQObject>>,
}

unsafe impl Send for HeraldUtilsEmitter {}

impl HeraldUtilsEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> HeraldUtilsEmitter {
        HeraldUtilsEmitter {
            qobject: self.qobject.clone(),
        }
    }
    fn clear(&self) {
        let n: *const HeraldUtilsQObject = null();
        self.qobject
            .store(n as *mut HeraldUtilsQObject, Ordering::SeqCst);
    }
}

pub trait HeraldUtilsTrait {
    fn new(emit: HeraldUtilsEmitter) -> Self;
    fn emit(&mut self) -> &mut HeraldUtilsEmitter;
    fn compare_byte_array(&self, bs1: &[u8], bs2: &[u8]) -> bool;
}

#[no_mangle]
pub extern "C" fn herald_utils_new(herald_utils: *mut HeraldUtilsQObject) -> *mut HeraldUtils {
    let herald_utils_emit = HeraldUtilsEmitter {
        qobject: Arc::new(AtomicPtr::new(herald_utils)),
    };
    let d_herald_utils = HeraldUtils::new(herald_utils_emit);
    Box::into_raw(Box::new(d_herald_utils))
}

#[no_mangle]
pub unsafe extern "C" fn herald_utils_free(ptr: *mut HeraldUtils) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn herald_utils_compare_byte_array(
    ptr: *const HeraldUtils,
    bs1_str: *const c_char,
    bs1_len: c_int,
    bs2_str: *const c_char,
    bs2_len: c_int,
) -> bool {
    let bs1 = { slice::from_raw_parts(bs1_str as *const u8, to_usize(bs1_len)) };
    let bs2 = { slice::from_raw_parts(bs2_str as *const u8, to_usize(bs2_len)) };
    let o = &*ptr;
    let r = o.compare_byte_array(bs1, bs2);
    r
}

pub struct MessagesQObject {}

pub struct MessagesEmitter {
    qobject: Arc<AtomicPtr<MessagesQObject>>,
    conversation_id_changed: fn(*mut MessagesQObject),
    new_data_ready: fn(*mut MessagesQObject),
}

unsafe impl Send for MessagesEmitter {}

impl MessagesEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> MessagesEmitter {
        MessagesEmitter {
            qobject: self.qobject.clone(),
            conversation_id_changed: self.conversation_id_changed,
            new_data_ready: self.new_data_ready,
        }
    }
    fn clear(&self) {
        let n: *const MessagesQObject = null();
        self.qobject
            .store(n as *mut MessagesQObject, Ordering::SeqCst);
    }
    pub fn conversation_id_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.conversation_id_changed)(ptr);
        }
    }
    pub fn new_data_ready(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.new_data_ready)(ptr);
        }
    }
}

#[derive(Clone)]
pub struct MessagesList {
    qobject: *mut MessagesQObject,
    layout_about_to_be_changed: fn(*mut MessagesQObject),
    layout_changed: fn(*mut MessagesQObject),
    data_changed: fn(*mut MessagesQObject, usize, usize),
    begin_reset_model: fn(*mut MessagesQObject),
    end_reset_model: fn(*mut MessagesQObject),
    begin_insert_rows: fn(*mut MessagesQObject, usize, usize),
    end_insert_rows: fn(*mut MessagesQObject),
    begin_move_rows: fn(*mut MessagesQObject, usize, usize, usize),
    end_move_rows: fn(*mut MessagesQObject),
    begin_remove_rows: fn(*mut MessagesQObject, usize, usize),
    end_remove_rows: fn(*mut MessagesQObject),
}

impl MessagesList {
    pub fn layout_about_to_be_changed(&mut self) {
        (self.layout_about_to_be_changed)(self.qobject);
    }
    pub fn layout_changed(&mut self) {
        (self.layout_changed)(self.qobject);
    }
    pub fn data_changed(&mut self, first: usize, last: usize) {
        (self.data_changed)(self.qobject, first, last);
    }
    pub fn begin_reset_model(&mut self) {
        (self.begin_reset_model)(self.qobject);
    }
    pub fn end_reset_model(&mut self) {
        (self.end_reset_model)(self.qobject);
    }
    pub fn begin_insert_rows(&mut self, first: usize, last: usize) {
        (self.begin_insert_rows)(self.qobject, first, last);
    }
    pub fn end_insert_rows(&mut self) {
        (self.end_insert_rows)(self.qobject);
    }
    pub fn begin_move_rows(&mut self, first: usize, last: usize, destination: usize) {
        (self.begin_move_rows)(self.qobject, first, last, destination);
    }
    pub fn end_move_rows(&mut self) {
        (self.end_move_rows)(self.qobject);
    }
    pub fn begin_remove_rows(&mut self, first: usize, last: usize) {
        (self.begin_remove_rows)(self.qobject, first, last);
    }
    pub fn end_remove_rows(&mut self) {
        (self.end_remove_rows)(self.qobject);
    }
}

pub trait MessagesTrait {
    fn new(emit: MessagesEmitter, model: MessagesList) -> Self;
    fn emit(&mut self) -> &mut MessagesEmitter;
    fn conversation_id(&self) -> Option<&[u8]>;
    fn set_conversation_id(&mut self, value: Option<&[u8]>);
    fn clear_conversation_view(&mut self) -> ();
    fn delete_conversation(&mut self) -> bool;
    fn delete_conversation_by_id(&mut self, conversation_id: &[u8]) -> bool;
    fn delete_message(&mut self, row_index: u64) -> bool;
    fn insert_message(&mut self, body: String) -> Vec<u8>;
    fn reply(&mut self, body: String, op: &[u8]) -> Vec<u8>;
    fn row_count(&self) -> usize;
    fn insert_rows(&mut self, _row: usize, _count: usize) -> bool {
        false
    }
    fn remove_rows(&mut self, _row: usize, _count: usize) -> bool {
        false
    }
    fn can_fetch_more(&self) -> bool {
        false
    }
    fn fetch_more(&mut self) {}
    fn sort(&mut self, _: u8, _: SortOrder) {}
    fn author(&self, index: usize) -> &str;
    fn body(&self, index: usize) -> &str;
    fn epoch_timestamp_ms(&self, index: usize) -> i64;
    fn message_id(&self, index: usize) -> &[u8];
    fn op(&self, index: usize) -> Option<&[u8]>;
}

#[no_mangle]
pub extern "C" fn messages_new(
    messages: *mut MessagesQObject,
    messages_conversation_id_changed: fn(*mut MessagesQObject),
    messages_new_data_ready: fn(*mut MessagesQObject),
    messages_layout_about_to_be_changed: fn(*mut MessagesQObject),
    messages_layout_changed: fn(*mut MessagesQObject),
    messages_data_changed: fn(*mut MessagesQObject, usize, usize),
    messages_begin_reset_model: fn(*mut MessagesQObject),
    messages_end_reset_model: fn(*mut MessagesQObject),
    messages_begin_insert_rows: fn(*mut MessagesQObject, usize, usize),
    messages_end_insert_rows: fn(*mut MessagesQObject),
    messages_begin_move_rows: fn(*mut MessagesQObject, usize, usize, usize),
    messages_end_move_rows: fn(*mut MessagesQObject),
    messages_begin_remove_rows: fn(*mut MessagesQObject, usize, usize),
    messages_end_remove_rows: fn(*mut MessagesQObject),
) -> *mut Messages {
    let messages_emit = MessagesEmitter {
        qobject: Arc::new(AtomicPtr::new(messages)),
        conversation_id_changed: messages_conversation_id_changed,
        new_data_ready: messages_new_data_ready,
    };
    let model = MessagesList {
        qobject: messages,
        layout_about_to_be_changed: messages_layout_about_to_be_changed,
        layout_changed: messages_layout_changed,
        data_changed: messages_data_changed,
        begin_reset_model: messages_begin_reset_model,
        end_reset_model: messages_end_reset_model,
        begin_insert_rows: messages_begin_insert_rows,
        end_insert_rows: messages_end_insert_rows,
        begin_move_rows: messages_begin_move_rows,
        end_move_rows: messages_end_move_rows,
        begin_remove_rows: messages_begin_remove_rows,
        end_remove_rows: messages_end_remove_rows,
    };
    let d_messages = Messages::new(messages_emit, model);
    Box::into_raw(Box::new(d_messages))
}

#[no_mangle]
pub unsafe extern "C" fn messages_free(ptr: *mut Messages) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn messages_conversation_id_get(
    ptr: *const Messages,
    p: *mut QByteArray,
    set: fn(*mut QByteArray, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.conversation_id();
    if let Some(v) = v {
        let s: *const c_char = v.as_ptr() as (*const c_char);
        set(p, s, to_c_int(v.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn messages_conversation_id_set(
    ptr: *mut Messages,
    v: *const c_char,
    len: c_int,
) {
    let o = &mut *ptr;
    let v = slice::from_raw_parts(v as *const u8, to_usize(len));
    o.set_conversation_id(Some(v.into()));
}

#[no_mangle]
pub unsafe extern "C" fn messages_conversation_id_set_none(ptr: *mut Messages) {
    let o = &mut *ptr;
    o.set_conversation_id(None);
}

#[no_mangle]
pub unsafe extern "C" fn messages_clear_conversation_view(ptr: *mut Messages) -> () {
    let o = &mut *ptr;
    let r = o.clear_conversation_view();
    r
}

#[no_mangle]
pub unsafe extern "C" fn messages_delete_conversation(ptr: *mut Messages) -> bool {
    let o = &mut *ptr;
    let r = o.delete_conversation();
    r
}

#[no_mangle]
pub unsafe extern "C" fn messages_delete_conversation_by_id(
    ptr: *mut Messages,
    conversation_id_str: *const c_char,
    conversation_id_len: c_int,
) -> bool {
    let conversation_id = {
        slice::from_raw_parts(
            conversation_id_str as *const u8,
            to_usize(conversation_id_len),
        )
    };
    let o = &mut *ptr;
    let r = o.delete_conversation_by_id(conversation_id);
    r
}

#[no_mangle]
pub unsafe extern "C" fn messages_delete_message(ptr: *mut Messages, row_index: u64) -> bool {
    let o = &mut *ptr;
    let r = o.delete_message(row_index);
    r
}

#[no_mangle]
pub unsafe extern "C" fn messages_insert_message(
    ptr: *mut Messages,
    body_str: *const c_ushort,
    body_len: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, str: *const c_char, len: c_int),
) {
    let mut body = String::new();
    set_string_from_utf16(&mut body, body_str, body_len);
    let o = &mut *ptr;
    let r = o.insert_message(body);
    let s: *const c_char = r.as_ptr() as (*const c_char);
    set(d, s, r.len() as i32);
}

#[no_mangle]
pub unsafe extern "C" fn messages_reply(
    ptr: *mut Messages,
    body_str: *const c_ushort,
    body_len: c_int,
    op_str: *const c_char,
    op_len: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, str: *const c_char, len: c_int),
) {
    let mut body = String::new();
    set_string_from_utf16(&mut body, body_str, body_len);
    let op = { slice::from_raw_parts(op_str as *const u8, to_usize(op_len)) };
    let o = &mut *ptr;
    let r = o.reply(body, op);
    let s: *const c_char = r.as_ptr() as (*const c_char);
    set(d, s, r.len() as i32);
}

#[no_mangle]
pub unsafe extern "C" fn messages_row_count(ptr: *const Messages) -> c_int {
    to_c_int((&*ptr).row_count())
}
#[no_mangle]
pub unsafe extern "C" fn messages_insert_rows(
    ptr: *mut Messages,
    row: c_int,
    count: c_int,
) -> bool {
    (&mut *ptr).insert_rows(to_usize(row), to_usize(count))
}
#[no_mangle]
pub unsafe extern "C" fn messages_remove_rows(
    ptr: *mut Messages,
    row: c_int,
    count: c_int,
) -> bool {
    (&mut *ptr).remove_rows(to_usize(row), to_usize(count))
}
#[no_mangle]
pub unsafe extern "C" fn messages_can_fetch_more(ptr: *const Messages) -> bool {
    (&*ptr).can_fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn messages_fetch_more(ptr: *mut Messages) {
    (&mut *ptr).fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn messages_sort(ptr: *mut Messages, column: u8, order: SortOrder) {
    (&mut *ptr).sort(column, order)
}

#[no_mangle]
pub unsafe extern "C" fn messages_data_author(
    ptr: *const Messages,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.author(to_usize(row));
    let s: *const c_char = data.as_ptr() as (*const c_char);
    set(d, s, to_c_int(data.len()));
}

#[no_mangle]
pub unsafe extern "C" fn messages_data_body(
    ptr: *const Messages,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.body(to_usize(row));
    let s: *const c_char = data.as_ptr() as (*const c_char);
    set(d, s, to_c_int(data.len()));
}

#[no_mangle]
pub unsafe extern "C" fn messages_data_epoch_timestamp_ms(ptr: *const Messages, row: c_int) -> i64 {
    let o = &*ptr;
    o.epoch_timestamp_ms(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn messages_data_message_id(
    ptr: *const Messages,
    row: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.message_id(to_usize(row));
    let s: *const c_char = data.as_ptr() as (*const c_char);
    set(d, s, to_c_int(data.len()));
}

#[no_mangle]
pub unsafe extern "C" fn messages_data_op(
    ptr: *const Messages,
    row: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.op(to_usize(row));
    if let Some(data) = data {
        let s: *const c_char = data.as_ptr() as (*const c_char);
        set(d, s, to_c_int(data.len()));
    }
}

pub struct NetworkHandleQObject {}

pub struct NetworkHandleEmitter {
    qobject: Arc<AtomicPtr<NetworkHandleQObject>>,
    connection_pending_changed: fn(*mut NetworkHandleQObject),
    connection_up_changed: fn(*mut NetworkHandleQObject),
    new_contact_changed: fn(*mut NetworkHandleQObject),
    new_message_changed: fn(*mut NetworkHandleQObject),
}

unsafe impl Send for NetworkHandleEmitter {}

impl NetworkHandleEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> NetworkHandleEmitter {
        NetworkHandleEmitter {
            qobject: self.qobject.clone(),
            connection_pending_changed: self.connection_pending_changed,
            connection_up_changed: self.connection_up_changed,
            new_contact_changed: self.new_contact_changed,
            new_message_changed: self.new_message_changed,
        }
    }
    fn clear(&self) {
        let n: *const NetworkHandleQObject = null();
        self.qobject
            .store(n as *mut NetworkHandleQObject, Ordering::SeqCst);
    }
    pub fn connection_pending_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.connection_pending_changed)(ptr);
        }
    }
    pub fn connection_up_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.connection_up_changed)(ptr);
        }
    }
    pub fn new_contact_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.new_contact_changed)(ptr);
        }
    }
    pub fn new_message_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.new_message_changed)(ptr);
        }
    }
}

pub trait NetworkHandleTrait {
    fn new(emit: NetworkHandleEmitter) -> Self;
    fn emit(&mut self) -> &mut NetworkHandleEmitter;
    fn connection_pending(&self) -> bool;
    fn connection_up(&self) -> bool;
    fn new_contact(&self) -> bool;
    fn new_message(&self) -> bool;
    fn register_device(&mut self) -> bool;
    fn request_meta_data(&mut self, of: String) -> bool;
    fn send_add_request(&mut self, user_id: String, conversation_id: &[u8]) -> bool;
    fn send_message(&mut self, message_body: String, to: &[u8], msg_id: &[u8]) -> bool;
}

#[no_mangle]
pub extern "C" fn network_handle_new(
    network_handle: *mut NetworkHandleQObject,
    network_handle_connection_pending_changed: fn(*mut NetworkHandleQObject),
    network_handle_connection_up_changed: fn(*mut NetworkHandleQObject),
    network_handle_new_contact_changed: fn(*mut NetworkHandleQObject),
    network_handle_new_message_changed: fn(*mut NetworkHandleQObject),
) -> *mut NetworkHandle {
    let network_handle_emit = NetworkHandleEmitter {
        qobject: Arc::new(AtomicPtr::new(network_handle)),
        connection_pending_changed: network_handle_connection_pending_changed,
        connection_up_changed: network_handle_connection_up_changed,
        new_contact_changed: network_handle_new_contact_changed,
        new_message_changed: network_handle_new_message_changed,
    };
    let d_network_handle = NetworkHandle::new(network_handle_emit);
    Box::into_raw(Box::new(d_network_handle))
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_free(ptr: *mut NetworkHandle) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_connection_pending_get(ptr: *const NetworkHandle) -> bool {
    (&*ptr).connection_pending()
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_connection_up_get(ptr: *const NetworkHandle) -> bool {
    (&*ptr).connection_up()
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_new_contact_get(ptr: *const NetworkHandle) -> bool {
    (&*ptr).new_contact()
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_new_message_get(ptr: *const NetworkHandle) -> bool {
    (&*ptr).new_message()
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_register_device(ptr: *mut NetworkHandle) -> bool {
    let o = &mut *ptr;
    let r = o.register_device();
    r
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_request_meta_data(
    ptr: *mut NetworkHandle,
    of_str: *const c_ushort,
    of_len: c_int,
) -> bool {
    let mut of = String::new();
    set_string_from_utf16(&mut of, of_str, of_len);
    let o = &mut *ptr;
    let r = o.request_meta_data(of);
    r
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_send_add_request(
    ptr: *mut NetworkHandle,
    user_id_str: *const c_ushort,
    user_id_len: c_int,
    conversation_id_str: *const c_char,
    conversation_id_len: c_int,
) -> bool {
    let mut user_id = String::new();
    set_string_from_utf16(&mut user_id, user_id_str, user_id_len);
    let conversation_id = {
        slice::from_raw_parts(
            conversation_id_str as *const u8,
            to_usize(conversation_id_len),
        )
    };
    let o = &mut *ptr;
    let r = o.send_add_request(user_id, conversation_id);
    r
}

#[no_mangle]
pub unsafe extern "C" fn network_handle_send_message(
    ptr: *mut NetworkHandle,
    message_body_str: *const c_ushort,
    message_body_len: c_int,
    to_str: *const c_char,
    to_len: c_int,
    msg_id_str: *const c_char,
    msg_id_len: c_int,
) -> bool {
    let mut message_body = String::new();
    set_string_from_utf16(&mut message_body, message_body_str, message_body_len);
    let to = { slice::from_raw_parts(to_str as *const u8, to_usize(to_len)) };
    let msg_id = { slice::from_raw_parts(msg_id_str as *const u8, to_usize(msg_id_len)) };
    let o = &mut *ptr;
    let r = o.send_message(message_body, to, msg_id);
    r
}

pub struct UsersQObject {}

pub struct UsersEmitter {
    qobject: Arc<AtomicPtr<UsersQObject>>,
    conversation_id_changed: fn(*mut UsersQObject),
    filter_changed: fn(*mut UsersQObject),
    filter_regex_changed: fn(*mut UsersQObject),
    new_data_ready: fn(*mut UsersQObject),
}

unsafe impl Send for UsersEmitter {}

impl UsersEmitter {
    /// Clone the emitter
    ///
    /// The emitter can only be cloned when it is mutable. The emitter calls
    /// into C++ code which may call into Rust again. If emmitting is possible
    /// from immutable structures, that might lead to access to a mutable
    /// reference. That is undefined behaviour and forbidden.
    pub fn clone(&mut self) -> UsersEmitter {
        UsersEmitter {
            qobject: self.qobject.clone(),
            conversation_id_changed: self.conversation_id_changed,
            filter_changed: self.filter_changed,
            filter_regex_changed: self.filter_regex_changed,
            new_data_ready: self.new_data_ready,
        }
    }
    fn clear(&self) {
        let n: *const UsersQObject = null();
        self.qobject.store(n as *mut UsersQObject, Ordering::SeqCst);
    }
    pub fn conversation_id_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.conversation_id_changed)(ptr);
        }
    }
    pub fn filter_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.filter_changed)(ptr);
        }
    }
    pub fn filter_regex_changed(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.filter_regex_changed)(ptr);
        }
    }
    pub fn new_data_ready(&mut self) {
        let ptr = self.qobject.load(Ordering::SeqCst);
        if !ptr.is_null() {
            (self.new_data_ready)(ptr);
        }
    }
}

#[derive(Clone)]
pub struct UsersList {
    qobject: *mut UsersQObject,
    layout_about_to_be_changed: fn(*mut UsersQObject),
    layout_changed: fn(*mut UsersQObject),
    data_changed: fn(*mut UsersQObject, usize, usize),
    begin_reset_model: fn(*mut UsersQObject),
    end_reset_model: fn(*mut UsersQObject),
    begin_insert_rows: fn(*mut UsersQObject, usize, usize),
    end_insert_rows: fn(*mut UsersQObject),
    begin_move_rows: fn(*mut UsersQObject, usize, usize, usize),
    end_move_rows: fn(*mut UsersQObject),
    begin_remove_rows: fn(*mut UsersQObject, usize, usize),
    end_remove_rows: fn(*mut UsersQObject),
}

impl UsersList {
    pub fn layout_about_to_be_changed(&mut self) {
        (self.layout_about_to_be_changed)(self.qobject);
    }
    pub fn layout_changed(&mut self) {
        (self.layout_changed)(self.qobject);
    }
    pub fn data_changed(&mut self, first: usize, last: usize) {
        (self.data_changed)(self.qobject, first, last);
    }
    pub fn begin_reset_model(&mut self) {
        (self.begin_reset_model)(self.qobject);
    }
    pub fn end_reset_model(&mut self) {
        (self.end_reset_model)(self.qobject);
    }
    pub fn begin_insert_rows(&mut self, first: usize, last: usize) {
        (self.begin_insert_rows)(self.qobject, first, last);
    }
    pub fn end_insert_rows(&mut self) {
        (self.end_insert_rows)(self.qobject);
    }
    pub fn begin_move_rows(&mut self, first: usize, last: usize, destination: usize) {
        (self.begin_move_rows)(self.qobject, first, last, destination);
    }
    pub fn end_move_rows(&mut self) {
        (self.end_move_rows)(self.qobject);
    }
    pub fn begin_remove_rows(&mut self, first: usize, last: usize) {
        (self.begin_remove_rows)(self.qobject, first, last);
    }
    pub fn end_remove_rows(&mut self) {
        (self.end_remove_rows)(self.qobject);
    }
}

pub trait UsersTrait {
    fn new(emit: UsersEmitter, model: UsersList) -> Self;
    fn emit(&mut self) -> &mut UsersEmitter;
    fn conversation_id(&self) -> Option<&[u8]>;
    fn set_conversation_id(&mut self, value: Option<&[u8]>);
    fn filter(&self) -> &str;
    fn set_filter(&mut self, value: String);
    fn filter_regex(&self) -> bool;
    fn set_filter_regex(&mut self, value: bool);
    fn add(&mut self, id: String) -> Vec<u8>;
    fn add_to_conversation(&mut self, row_index: u64, conversation_id: &[u8]) -> bool;
    fn index_from_conversation_id(&self, conversation_id: &[u8]) -> i64;
    fn remove_from_conversation(&mut self, row_index: u64, conversation_id: &[u8]) -> bool;
    fn toggle_filter_regex(&mut self) -> bool;
    fn row_count(&self) -> usize;
    fn insert_rows(&mut self, _row: usize, _count: usize) -> bool {
        false
    }
    fn remove_rows(&mut self, _row: usize, _count: usize) -> bool {
        false
    }
    fn can_fetch_more(&self) -> bool {
        false
    }
    fn fetch_more(&mut self) {}
    fn sort(&mut self, _: u8, _: SortOrder) {}
    fn color(&self, index: usize) -> u32;
    fn set_color(&mut self, index: usize, _: u32) -> bool;
    fn matched(&self, index: usize) -> bool;
    fn set_matched(&mut self, index: usize, _: bool) -> bool;
    fn name(&self, index: usize) -> Option<&str>;
    fn set_name(&mut self, index: usize, _: Option<String>) -> bool;
    fn pairwise_conversation_id(&self, index: usize) -> &[u8];
    fn profile_picture(&self, index: usize) -> Option<&str>;
    fn set_profile_picture(&mut self, index: usize, _: Option<String>) -> bool;
    fn status(&self, index: usize) -> u8;
    fn set_status(&mut self, index: usize, _: u8) -> bool;
    fn user_id(&self, index: usize) -> &str;
}

#[no_mangle]
pub extern "C" fn users_new(
    users: *mut UsersQObject,
    users_conversation_id_changed: fn(*mut UsersQObject),
    users_filter_changed: fn(*mut UsersQObject),
    users_filter_regex_changed: fn(*mut UsersQObject),
    users_new_data_ready: fn(*mut UsersQObject),
    users_layout_about_to_be_changed: fn(*mut UsersQObject),
    users_layout_changed: fn(*mut UsersQObject),
    users_data_changed: fn(*mut UsersQObject, usize, usize),
    users_begin_reset_model: fn(*mut UsersQObject),
    users_end_reset_model: fn(*mut UsersQObject),
    users_begin_insert_rows: fn(*mut UsersQObject, usize, usize),
    users_end_insert_rows: fn(*mut UsersQObject),
    users_begin_move_rows: fn(*mut UsersQObject, usize, usize, usize),
    users_end_move_rows: fn(*mut UsersQObject),
    users_begin_remove_rows: fn(*mut UsersQObject, usize, usize),
    users_end_remove_rows: fn(*mut UsersQObject),
) -> *mut Users {
    let users_emit = UsersEmitter {
        qobject: Arc::new(AtomicPtr::new(users)),
        conversation_id_changed: users_conversation_id_changed,
        filter_changed: users_filter_changed,
        filter_regex_changed: users_filter_regex_changed,
        new_data_ready: users_new_data_ready,
    };
    let model = UsersList {
        qobject: users,
        layout_about_to_be_changed: users_layout_about_to_be_changed,
        layout_changed: users_layout_changed,
        data_changed: users_data_changed,
        begin_reset_model: users_begin_reset_model,
        end_reset_model: users_end_reset_model,
        begin_insert_rows: users_begin_insert_rows,
        end_insert_rows: users_end_insert_rows,
        begin_move_rows: users_begin_move_rows,
        end_move_rows: users_end_move_rows,
        begin_remove_rows: users_begin_remove_rows,
        end_remove_rows: users_end_remove_rows,
    };
    let d_users = Users::new(users_emit, model);
    Box::into_raw(Box::new(d_users))
}

#[no_mangle]
pub unsafe extern "C" fn users_free(ptr: *mut Users) {
    Box::from_raw(ptr).emit().clear();
}

#[no_mangle]
pub unsafe extern "C" fn users_conversation_id_get(
    ptr: *const Users,
    p: *mut QByteArray,
    set: fn(*mut QByteArray, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.conversation_id();
    if let Some(v) = v {
        let s: *const c_char = v.as_ptr() as (*const c_char);
        set(p, s, to_c_int(v.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn users_conversation_id_set(ptr: *mut Users, v: *const c_char, len: c_int) {
    let o = &mut *ptr;
    let v = slice::from_raw_parts(v as *const u8, to_usize(len));
    o.set_conversation_id(Some(v.into()));
}

#[no_mangle]
pub unsafe extern "C" fn users_conversation_id_set_none(ptr: *mut Users) {
    let o = &mut *ptr;
    o.set_conversation_id(None);
}

#[no_mangle]
pub unsafe extern "C" fn users_filter_get(
    ptr: *const Users,
    p: *mut QString,
    set: fn(*mut QString, *const c_char, c_int),
) {
    let o = &*ptr;
    let v = o.filter();
    let s: *const c_char = v.as_ptr() as (*const c_char);
    set(p, s, to_c_int(v.len()));
}

#[no_mangle]
pub unsafe extern "C" fn users_filter_set(ptr: *mut Users, v: *const c_ushort, len: c_int) {
    let o = &mut *ptr;
    let mut s = String::new();
    set_string_from_utf16(&mut s, v, len);
    o.set_filter(s);
}

#[no_mangle]
pub unsafe extern "C" fn users_filter_regex_get(ptr: *const Users) -> bool {
    (&*ptr).filter_regex()
}

#[no_mangle]
pub unsafe extern "C" fn users_filter_regex_set(ptr: *mut Users, v: bool) {
    (&mut *ptr).set_filter_regex(v);
}

#[no_mangle]
pub unsafe extern "C" fn users_add(
    ptr: *mut Users,
    id_str: *const c_ushort,
    id_len: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, str: *const c_char, len: c_int),
) {
    let mut id = String::new();
    set_string_from_utf16(&mut id, id_str, id_len);
    let o = &mut *ptr;
    let r = o.add(id);
    let s: *const c_char = r.as_ptr() as (*const c_char);
    set(d, s, r.len() as i32);
}

#[no_mangle]
pub unsafe extern "C" fn users_add_to_conversation(
    ptr: *mut Users,
    row_index: u64,
    conversation_id_str: *const c_char,
    conversation_id_len: c_int,
) -> bool {
    let conversation_id = {
        slice::from_raw_parts(
            conversation_id_str as *const u8,
            to_usize(conversation_id_len),
        )
    };
    let o = &mut *ptr;
    let r = o.add_to_conversation(row_index, conversation_id);
    r
}

#[no_mangle]
pub unsafe extern "C" fn users_index_from_conversation_id(
    ptr: *const Users,
    conversation_id_str: *const c_char,
    conversation_id_len: c_int,
) -> i64 {
    let conversation_id = {
        slice::from_raw_parts(
            conversation_id_str as *const u8,
            to_usize(conversation_id_len),
        )
    };
    let o = &*ptr;
    let r = o.index_from_conversation_id(conversation_id);
    r
}

#[no_mangle]
pub unsafe extern "C" fn users_remove_from_conversation(
    ptr: *mut Users,
    row_index: u64,
    conversation_id_str: *const c_char,
    conversation_id_len: c_int,
) -> bool {
    let conversation_id = {
        slice::from_raw_parts(
            conversation_id_str as *const u8,
            to_usize(conversation_id_len),
        )
    };
    let o = &mut *ptr;
    let r = o.remove_from_conversation(row_index, conversation_id);
    r
}

#[no_mangle]
pub unsafe extern "C" fn users_toggle_filter_regex(ptr: *mut Users) -> bool {
    let o = &mut *ptr;
    let r = o.toggle_filter_regex();
    r
}

#[no_mangle]
pub unsafe extern "C" fn users_row_count(ptr: *const Users) -> c_int {
    to_c_int((&*ptr).row_count())
}
#[no_mangle]
pub unsafe extern "C" fn users_insert_rows(ptr: *mut Users, row: c_int, count: c_int) -> bool {
    (&mut *ptr).insert_rows(to_usize(row), to_usize(count))
}
#[no_mangle]
pub unsafe extern "C" fn users_remove_rows(ptr: *mut Users, row: c_int, count: c_int) -> bool {
    (&mut *ptr).remove_rows(to_usize(row), to_usize(count))
}
#[no_mangle]
pub unsafe extern "C" fn users_can_fetch_more(ptr: *const Users) -> bool {
    (&*ptr).can_fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn users_fetch_more(ptr: *mut Users) {
    (&mut *ptr).fetch_more()
}
#[no_mangle]
pub unsafe extern "C" fn users_sort(ptr: *mut Users, column: u8, order: SortOrder) {
    (&mut *ptr).sort(column, order)
}

#[no_mangle]
pub unsafe extern "C" fn users_data_color(ptr: *const Users, row: c_int) -> u32 {
    let o = &*ptr;
    o.color(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_color(ptr: *mut Users, row: c_int, v: u32) -> bool {
    (&mut *ptr).set_color(to_usize(row), v)
}

#[no_mangle]
pub unsafe extern "C" fn users_data_matched(ptr: *const Users, row: c_int) -> bool {
    let o = &*ptr;
    o.matched(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_matched(ptr: *mut Users, row: c_int, v: bool) -> bool {
    (&mut *ptr).set_matched(to_usize(row), v)
}

#[no_mangle]
pub unsafe extern "C" fn users_data_name(
    ptr: *const Users,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.name(to_usize(row));
    if let Some(data) = data {
        let s: *const c_char = data.as_ptr() as (*const c_char);
        set(d, s, to_c_int(data.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_name(
    ptr: *mut Users,
    row: c_int,
    s: *const c_ushort,
    len: c_int,
) -> bool {
    let o = &mut *ptr;
    let mut v = String::new();
    set_string_from_utf16(&mut v, s, len);
    o.set_name(to_usize(row), Some(v))
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_name_none(ptr: *mut Users, row: c_int) -> bool {
    (&mut *ptr).set_name(to_usize(row), None)
}

#[no_mangle]
pub unsafe extern "C" fn users_data_pairwise_conversation_id(
    ptr: *const Users,
    row: c_int,
    d: *mut QByteArray,
    set: fn(*mut QByteArray, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.pairwise_conversation_id(to_usize(row));
    let s: *const c_char = data.as_ptr() as (*const c_char);
    set(d, s, to_c_int(data.len()));
}

#[no_mangle]
pub unsafe extern "C" fn users_data_profile_picture(
    ptr: *const Users,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.profile_picture(to_usize(row));
    if let Some(data) = data {
        let s: *const c_char = data.as_ptr() as (*const c_char);
        set(d, s, to_c_int(data.len()));
    }
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_profile_picture(
    ptr: *mut Users,
    row: c_int,
    s: *const c_ushort,
    len: c_int,
) -> bool {
    let o = &mut *ptr;
    let mut v = String::new();
    set_string_from_utf16(&mut v, s, len);
    o.set_profile_picture(to_usize(row), Some(v))
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_profile_picture_none(ptr: *mut Users, row: c_int) -> bool {
    (&mut *ptr).set_profile_picture(to_usize(row), None)
}

#[no_mangle]
pub unsafe extern "C" fn users_data_status(ptr: *const Users, row: c_int) -> u8 {
    let o = &*ptr;
    o.status(to_usize(row)).into()
}

#[no_mangle]
pub unsafe extern "C" fn users_set_data_status(ptr: *mut Users, row: c_int, v: u8) -> bool {
    (&mut *ptr).set_status(to_usize(row), v)
}

#[no_mangle]
pub unsafe extern "C" fn users_data_user_id(
    ptr: *const Users,
    row: c_int,
    d: *mut QString,
    set: fn(*mut QString, *const c_char, len: c_int),
) {
    let o = &*ptr;
    let data = o.user_id(to_usize(row));
    let s: *const c_char = data.as_ptr() as (*const c_char);
    set(d, s, to_c_int(data.len()));
}
